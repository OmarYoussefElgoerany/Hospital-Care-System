// <auto-generated />
using System;
using HospitalCareSystem.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalSystemDAL.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthCareSystem.DAL.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceRate")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jessie",
                            PerformanceRate = 65,
                            Salary = 27064m,
                            Specialization = "Hematology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Judy",
                            PerformanceRate = 32,
                            Salary = 18711m,
                            Specialization = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Naomi",
                            PerformanceRate = 27,
                            Salary = 32145m,
                            Specialization = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Joann",
                            PerformanceRate = 72,
                            Salary = 9232m,
                            Specialization = "Hematology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Judy",
                            PerformanceRate = 19,
                            Salary = 48498m,
                            Specialization = "Dermatology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Alyssa",
                            PerformanceRate = 79,
                            Salary = 16586m,
                            Specialization = "Gastroenterology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mable",
                            PerformanceRate = 5,
                            Salary = 33706m,
                            Specialization = "Infectious Disease"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Paula",
                            PerformanceRate = 0,
                            Salary = 19094m,
                            Specialization = "Urology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Rafael",
                            PerformanceRate = 97,
                            Salary = 12266m,
                            Specialization = "Pediatrics"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sara",
                            PerformanceRate = 82,
                            Salary = 45041m,
                            Specialization = "Pediatrics"
                        });
                });

            modelBuilder.Entity("HealthCareSystem.DAL.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diabetes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hypertension"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Asthma"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Depression"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Arthritis"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Allergy"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Flu"
                        });
                });

            modelBuilder.Entity("HealthCareSystem.DAL.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 5,
                            Name = "Dana"
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 7,
                            Name = "Isaac"
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 9,
                            Name = "Damon"
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 8,
                            Name = "Miriam"
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 7,
                            Name = "Terence"
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 1,
                            Name = "Roosevelt"
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 9,
                            Name = "Eduardo"
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 8,
                            Name = "Wilbert"
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 5,
                            Name = "Tasha"
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 1,
                            Name = "Max"
                        },
                        new
                        {
                            Id = 11,
                            DoctorId = 2,
                            Name = "Bridget"
                        },
                        new
                        {
                            Id = 12,
                            DoctorId = 8,
                            Name = "Juan"
                        },
                        new
                        {
                            Id = 13,
                            DoctorId = 10,
                            Name = "Krystal"
                        },
                        new
                        {
                            Id = 14,
                            DoctorId = 10,
                            Name = "Erma"
                        },
                        new
                        {
                            Id = 15,
                            DoctorId = 6,
                            Name = "Orlando"
                        },
                        new
                        {
                            Id = 16,
                            DoctorId = 5,
                            Name = "Marvin"
                        },
                        new
                        {
                            Id = 17,
                            DoctorId = 4,
                            Name = "Lamar"
                        },
                        new
                        {
                            Id = 18,
                            DoctorId = 7,
                            Name = "Joe"
                        },
                        new
                        {
                            Id = 19,
                            DoctorId = 8,
                            Name = "Wendell"
                        },
                        new
                        {
                            Id = 20,
                            DoctorId = 4,
                            Name = "Sandra"
                        },
                        new
                        {
                            Id = 21,
                            DoctorId = 6,
                            Name = "Stephanie"
                        },
                        new
                        {
                            Id = 22,
                            DoctorId = 7,
                            Name = "Ervin"
                        },
                        new
                        {
                            Id = 23,
                            DoctorId = 4,
                            Name = "Beth"
                        },
                        new
                        {
                            Id = 24,
                            DoctorId = 7,
                            Name = "Gretchen"
                        },
                        new
                        {
                            Id = 25,
                            DoctorId = 2,
                            Name = "Gwendolyn"
                        },
                        new
                        {
                            Id = 26,
                            DoctorId = 7,
                            Name = "Jerry"
                        },
                        new
                        {
                            Id = 27,
                            DoctorId = 6,
                            Name = "Mitchell"
                        },
                        new
                        {
                            Id = 28,
                            DoctorId = 8,
                            Name = "Maggie"
                        },
                        new
                        {
                            Id = 29,
                            DoctorId = 3,
                            Name = "Sandy"
                        },
                        new
                        {
                            Id = 30,
                            DoctorId = 2,
                            Name = "Lloyd"
                        });
                });

            modelBuilder.Entity("HospitalCareSystem.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.Property<int>("IssuesId")
                        .HasColumnType("int");

                    b.Property<int>("PatientsId")
                        .HasColumnType("int");

                    b.HasKey("IssuesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IssuePatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthCareSystem.DAL.Patient", b =>
                {
                    b.HasOne("HealthCareSystem.DAL.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.HasOne("HealthCareSystem.DAL.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareSystem.DAL.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalCareSystem.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalCareSystem.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCareSystem.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalCareSystem.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareSystem.DAL.Doctor", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
